//#include"test.h"
//
//
//int main()
//{
//
//	return 0;
//}


//#include<iostream>
//
//int Add(int a, int b)
//{
//
//}
//
//double Add(double a, double b)
//{
//
//}
//
//int main()
//{
//	Add(1.2, 3.33);
//	// 不用担心要选择使用哪个函数，会使得程序运行变慢，因为选择使用哪个是在编译阶段完成的。
//	// 在编译的时候，地址已经完成选择，所以不用担心
//
//	// 只有声明，没有定义时
//	//如果文件名改成.c 查看报错情况，c和cpp可以明显看出，c是直接拿文件名找，cpp是修饰之后找
//  //并且，不同环境下，修饰规则不同，这是因为，C++发明的时候，只定义了可以函数重载，但是并没有定义其修饰规则
//  //不同的环境自己定义不同的规则，Linux下的修饰规则相对而言简单一些
//}




//#include<iostream>
//
//double Add(double a, double b)
//{
//
//}
//
//int Add(double a, double b)
//{
//
//}
//
//int main()
//{
//	//返回值不同无法构成重载，假设返回值也进入函数名修饰，编译器确实可以找到，但是像下面，调用两次，没有返回值，也不知道到底调用的哪一个
//    // 没有返回值，到底调用返回值是int，还是返回值是double
//	Add(1.2, 1.5);
//	Add(2.4, 3.6);
//}

